#!/bin/bash

# Pre-commit hook for Rust projects
# This hook automatically formats code with rustfmt before committing

set -e

echo "Running pre-commit hook: Formatting Rust code..."

# Check if rustfmt is available
if ! command -v rustfmt &> /dev/null; then
    echo "Error: rustfmt not found. Please install it with 'rustup component add rustfmt'"
    exit 1
fi

# Check if cargo is available
if ! command -v cargo &> /dev/null; then
    echo "Error: cargo not found. This doesn't seem to be a Rust project."
    exit 1
fi

# Check if Cargo.toml exists
if [ ! -f "Cargo.toml" ]; then
    echo "Error: Cargo.toml not found. This doesn't seem to be a Rust project."
    exit 1
fi

# Get list of staged Rust files
staged_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(rs)$' || true)

if [ -z "$staged_files" ]; then
    echo "No Rust files staged for commit."
    exit 0
fi

echo "Found staged Rust files:"
echo "$staged_files"

# Check if formatting is needed
if ! cargo fmt --check &> /dev/null; then
    echo "Code formatting issues detected. Auto-formatting..."
    
    # Format the code
    cargo fmt
    
    echo "✓ Code has been formatted with rustfmt"
    
    # Add the formatted files back to staging
    for file in $staged_files; do
        if [ -f "$file" ]; then
            git add "$file"
            echo "  Re-staged: $file"
        fi
    done
    
    echo ""
    echo "Files have been auto-formatted and re-staged."
    echo "Your commit will proceed with the formatted code."
else
    echo "✓ Code is already properly formatted"
fi

echo "Pre-commit hook completed successfully!" 